Maximum Absolute Difference
Problem Description

You are given an array of N integers, A1, A2, .... AN.

Return the maximum value of f(i, j) for all 1 ≤ i, j ≤ N. f(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.



Problem Constraints
1 <= N <= 100000

-109 <= A[i] <= 109



Input Format
First argument is an integer array A of size N.



Output Format
Return an integer denoting the maximum value of f(i, j).



Example Input
Input 1:

A = [1, 3, -1]
Input 2:

 
A = [2]


Example Output
Output 1:

5
Output 2:

0


Example Explanation
Explanation 1:

f(1, 1) = f(2, 2) = f(3, 3) = 0
f(1, 2) = f(2, 1) = |1 - 3| + |1 - 2| = 3
f(1, 3) = f(3, 1) = |1 - (-1)| + |1 - 3| = 4
f(2, 3) = f(3, 2) = |3 - (-1)| + |2 - 3| = 5

So, we return 5.
Explanation 2:

Only possibility is i = 1 and j = 1. That gives answer = 0.



int Solution::maxArr(vector<int> &A) {
    int n=A.size();
    //first case i>j and A[i]>A[j] we have to find the max((A[i]+i)-(A[j]+j))
    vector<int> test(n);
    for(int i=0;i<n;i++){
        test[i]=A[i]+i;
    }
    int prefix[n];
    prefix[0]=test[0];
    for(int i=1;i<n;i++){
        prefix[i]=min(prefix[i-1],test[i]);
    }
    int right_max=test[n-1];
    int ans=right_max-prefix[n-1];
    for(int i=n-2;i>=0;i--){
        right_max=max(right_max,test[i]);
        ans=max(ans,right_max-prefix[i]);
    }
    //second case when i>j and A[i]<A[j] then we have to find max((A[j]-j)-(A[i]-i))
    for(int i=0;i<n;i++){
        test[i]=A[i]-i;
    }
    prefix[0]=A[0];
    for(int i=1;i<n;i++){
        prefix[i]=max(prefix[i-1],test[i]);
    }
    int right_min=test[n-1];
    ans=max(ans,prefix[n-1]-right_min);
    for(int i=n-2;i>=0;i--){
        right_min=min(right_min,test[i]);
        ans=max(ans,prefix[i]-right_min);
    }
    return ans;
    
}
