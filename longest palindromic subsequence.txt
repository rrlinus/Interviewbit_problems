Longest Palindromic Subsequence
Problem Description

Given a string A. Find the longest palindromic subsequence (A subsequence which does not need to be contiguous and is a palindrome).

You need to return the length of longest palindromic subsequence.



Problem Constraints
1 <= length of(A) <= 103



Input Format
First and only integer is a string A.



Output Format
Return an integer denoting the length of longest palindromic subsequence.



Example Input
Input 1:

 A = "bebeeed"
Input 2:

 A = "aedsead"


Example Output
Output 1:

 4
Output 2:

 5


Example Explanation
Explanation 1:

 The longest palindromic subsequence is "eeee", which has a length of 4.
Explanation 2:

 The longest palindromic subsequence is "aedea", which has a length of 5.


int dp[1001][1001];
int soln(string A,int left,int right){
    if(left>right)
    return 0;
    if(left==right)
    return 1;
    if(dp[left][right]>=0)
    return dp[left][right];
    if(A[left]==A[right]){
        return dp[left][right]=2+soln(A,left+1,right-1);
    }
    return dp[left][right]=max(soln(A,left+1,right),soln(A,left,right-1));
    
}
int Solution::solve(string A) {
    memset(dp,-1,sizeof(dp));
    int n=A.length();
    return soln(A,0,n-1);
}
