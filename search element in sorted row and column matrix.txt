Given a matrix of integers A of size N x M and an integer B.
In the given matrix every row and column is sorted in increasing order. Find and return the position of B in the matrix in the given form:
If A[i][j] = B then return (i * 1009 + j)
If B is not present return -1.

Note 1: Rows are numbered from top to bottom and columns are numbered from left to right.
Note 2: If there are multiple B in A then return the smallest value of i*1009 +j such that A[i][j]=B.

int Solution::solve(vector<vector<int> > &A, int B) {
    /*...........Algorithm...........
    
    Here row and column are in sorted order so we will try to optimize the search space so how can we do that?
    
    if we start from (0,0) then we will see that we can't optimise any more.
    if we start from (0,m-1) then if current element is less than search element then move down
    else move left.
    */
    
    int i=0,j=A[0].size()-1;
    int n=A.size();
    while(i<n and j>=0){
        if(A[i][j]==B){
            return (i+1)*1009+(j+1);
        }
        else if(A[i][j]<B){
            i=i+1;
        }
        else{
            j=j-1;
        }
    }
    return -1;
}
