Anagram Substring Search
Given a string A and a string B.

Find and return the starting indices of the substrings of A which matches any of the anagrams of B.

Note: An anagram is a play on words created by rearranging the letters of the original word to make a new word or phrase


Input Format

The arguments given are string A and string B.
Output Format

Return the starting indices of the substrings of A which matches any of the anagrams of B.
Constraints

1 <= length of the string A,B <= 100000
length of string A > length of string B
'a' < = A[i] ,B[i] < ='z'
For Example

Input 1:
    A = "BACDGABCDA"
    B = "ABCD"
Output 1:
    [0, 5, 6]

Input 2:
    A = "AAABABAA"
    B = "AABA"
Output 2:
    [0, 1, 4]

vector<int> Solution::solve(string A, string B) {
    int hash[256];
    memset(hash,0,sizeof(hash));
    int m=B.length();
    for(int i=0;i<m;i++){
        hash[B[i]]++;
    }
    vector<int> ans;
    int i=0,j=0,n=A.length();
    while(i<n){
      if(hash[A[i]]>0){
          hash[A[i]]--;
          i++;
      }
      else{
          if(i-j==B.length()){
              ans.push_back(j);
              hash[A[j]]++;
              j++;
          }
          else{
              if(i==j){
                  i++;
                  j++;
              }
              else{
                  hash[A[j]]++;
                  j++;
              }
              
          }
      }
    }
    if(i-j==B.length())
    ans.push_back(j);
    return ans;
}
