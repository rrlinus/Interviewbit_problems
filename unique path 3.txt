Given a matrix of integers A of size N x M . There are 4 types of squares in it:

1. 1 represents the starting square.  There is exactly one starting square.
2. 2 represents the ending square.  There is exactly one ending square.
3. 0 represents empty squares we can walk over.
4. -1 represents obstacles that we cannot walk over.
Find and return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

Note: Rows are numbered from top to bottom and columns are numbered from left to right.



Problem Constraints
2 <= N * M <= 20
-1 <= A[i] <= 2



Input Format
The first argument given is the integer matrix A.



Output Format
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.



Example Input
Input 1:

A = [   [1, 0, 0, 0]
        [0, 0, 0, 0]
        [0, 0, 2, -1]   ]
Input 2:

A = [   [0, 1]
        [2, 0]    ]


Example Output
Output 1:

2
Output 2:

0


Example Explanation
Explanation 1:

We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Explanation 1:

Answer is evident here.

..............solution............

int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};
bool isSafe(int x,int y,int n,int m){
    return (x>=0 and y>=0 and x<n and y<m);
}
int soln(vector<vector<int> >&A,int x,int y,int ex,int ey,int n,int m){
    if(x==ex and y==ey){
       for(int i=0;i<n;i++){
           for(int j=0;j<m;j++){
               if(A[i][j]==0){
                   return 0;
               }
           }
       }
       return 1;
    }
    int temp=A[x][y];
    int ans=0;
    A[x][y]=-1;
    for(int i=0;i<4;i++){
        if(isSafe(x+dx[i],y+dy[i],n,m) and A[x+dx[i]][y+dy[i]]!=-1){
            ans +=soln(A,x+dx[i],y+dy[i],ex,ey,n,m);
        }
    }
    A[x][y]=temp;
    return ans;
}
int Solution::solve(vector<vector<int> > &A) {
    int n=A.size();
    int m=A[0].size();
    int sx,sy,ex,ey;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(A[i][j]==1){
                sx=i,sy=j;
            }
            else if(A[i][j]==2){
                ex=i,ey=j;
            }
        }
    }
    bool v[4]={false};
    return soln(A,sx,sy,ex,ey,n,m);
    
}