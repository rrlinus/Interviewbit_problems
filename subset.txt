Given a set of distinct integers, A, return all possible subsets.

NOTE:

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
Also, the subsets should be sorted in ascending ( lexicographic ) order.
The list is not necessarily sorted.


Problem Constraints
1 <= |A| <= 16
INTMIN <= A[i] <= INTMAX


Input Format
First and only argument of input contains a single integer array A.



Output Format
Return a vector of vectors denoting the answer.



Example Input
Input 1:

A = [1]
Input 2:

A = [1, 2, 3]


Example Output
Output 1:

[
    []
    [1]
]
Output 2:

[
 []
 [1]
 [1, 2]
 [1, 2, 3]
 [1, 3]
 [2]
 [2, 3]
 [3]
]


Example Explanation
Explanation 1:

 You can see that these are all possible subsets.
Explanation 2:

You can see that these are all possible subsets.
....................................................algo..........................
The idea is to sort the array first.
After sorting, one by one fix characters and recursively generates all subsets starting from them.
After every recursive call, we remove current character so that next permutation can be generated.
Basically, we're doing DFS. Print when encountering node
But don't print when going left - because already printed in parent.



void soln(vector<vector<int> > &ans,vector<int> &A,int i,vector<int> &temp){
    if(i==A.size())
    {
        ans.push_back(temp);
        return ;
    }
    ans.push_back(temp);
    for(int j=i;j<A.size();j++){
        temp.push_back(A[j]);
        soln(ans,A,j+1,temp);
        temp.pop_back();
    }
}
vector<vector<int> > Solution::subsets(vector<int> &A) {
    sort(A.begin(),A.end());
    vector<vector<int> > ans;
    vector<int> temp;
    soln(ans,A,0,temp);
    return ans;
}
