Problem Description

Given a collection of integers denoted by array A of size N that might contain duplicates, return all possible subsets.

NOTE:

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
The subsets must be sorted lexicographically.


Problem Constraints
0 <= N <= 16



Input Format
Only argument is an integer array A of size N.



Output Format
Return a 2-D vector denoting all the possible subsets.



Example Input
Input 1:

 A = [1, 2, 2]
Input 2:

 A = [1, 1]


Example Output
Output 1:

 [
    [],
    [1],
    [1, 2],
    [1, 2, 2],
    [2],
    [2, 2]
 ]
Output 2:

 [
    [],
    [1],
    [1, 1]
 ]


Example Explanation
Explanation 1:

All the subsets of the array [1, 2, 2] in lexicographically sorted order.



void solve(vector<vector<int> > &ans,vector<int> &A,vector<int> &temp,int i){
    if(i==A.size()){
        ans.push_back(temp);
        return;
    }
    ans.push_back(temp);
    for(int j=i;j<A.size();j++){
        temp.push_back(A[j]);
        solve(ans,A,temp,j+1);
        temp.pop_back();
    }
}

vector<vector<int> > Solution::subsetsWithDup(vector<int> &A) {
    vector<int> temp;
    vector<vector<int> > ans;
    sort(A.begin(),A.end());
    solve(ans,A,temp,0);
    sort(ans.begin(),ans.end());
    ans.resize(distance(ans.begin(),unique(ans.begin(),ans.end())));
    return ans;
}
