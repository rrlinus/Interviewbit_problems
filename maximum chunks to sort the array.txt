Max Chunks To Make Sorted II
Problem Description

Given an array of integers (not necessarily distinct) A, if we split the array into some number of "chunks" (partitions), and individually sort each chunk. After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

int Solution::solve(vector<int> &A) {
    /*..............Algorithm............
    
    try to find the maximum value from 0 to ith index and minimum   value from n-1 to ith index.
    if(maxvalue==minvalue){
        it means that we have one sorted chunks;
    }
    check for all value of i from 0 to n-1;
    */
    int n=A.size();
    vector<int> premax(n);
    vector<int> suffmin(n);
    int ans=0;
    premax[0]=A[0];
    suffmin[n-1]=A[n-1];
    for(int i=1;i<n;i++){
        premax[i]=max(premax[i-1],A[i]);
    }
    for(int i=n-2;i>=0;i--){
        suffmin[i]=min(suffmin[i+1],A[i]);
    }
    for(int i=n-1;i>0;i--){
        if(premax[i-1]<=suffmin[i]){
            ans++;
        }
    }
    return ans+1;
    
    
}
