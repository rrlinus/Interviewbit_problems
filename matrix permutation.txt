Matrix Permutation
Given a matrix of integers A of size N x N.Find whether all rows are circular rotations of each other or not.

Return "YES",if all rows of A are circular rotations of each other, else return "NO".

Note: Rows are numbered from top to bottom and columns are numbered from left to right.


Input Format

The first argument given is the integer matrix A.
Output Format

Return "YES",if all rows of A are circular rotations of each other, else return "NO".
Constraints

1 <= N <= 1000
1 <= A[i] <= 100000
For Example

Input 1:
    A = [   [1, 2, 3]
            [3, 2, 1]
            [2, 3, 1]   ]
Output 1:
    NO

Input 2:
    A = [   [1, 2, 2, 1]
            [1, 1, 2, 2]
            [2, 1, 1, 2]    
            [1, 1, 2, 2]    ]
Output 2:
    YES


string Solution::solve(vector<vector<int> > &A) {
    int n=A.size();
    string input;
    string temp;
    for(int i=0;i<n;i++){
        temp.push_back(A[0][i]+'0');
    }
    input=temp+temp;
    bool f=true;
    for(int i=1;i<n;i++){
        temp="";
        for(int j=0;j<n;j++){
           temp.push_back(A[i][j]+'0');
        }
        if(input.find(temp)==-1){
            f=false;
            break;
        }
    }
    if(f)
    return "YES";
    else
    return "NO";
}
