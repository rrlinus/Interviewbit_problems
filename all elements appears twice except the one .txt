Given a sorted array of integers A where every element appears twice except for one element which appears once, find and return this single element that appears only once.



Problem Constraints
1 <= |A| <= 100000

1 <= A[i] <= 10^9



Input Format
The only argument given is the integer array A.



Output Format
Return the single element that appears only once.



Example Input
Input 1:

A = [1, 1, 7]
Input 2:

A = [2, 3, 3]


Example Output
Output 1:

 7
Output 2:

 2


.......................Algorithm..........................
if observe the pattern in the given array then you will find that 
here again we can optimise our search space using binary search.

int solv(vector<int> &a,int start,int end){
    if(start>=end){
        return a[start];
    }
    int mid=start+(end-start)/2;
    if(mid>0 and a[mid]==a[mid-1] and mid%2==1){
        return solv(a,mid+1,end);
    }
    if(mid<end and a[mid]==a[mid+1] and mid %2==0){
        return solv(a,mid+1,end);
    }
    if(mid>0 and a[mid]==a[mid-1] and mid%2==0){
        return solv(a,start,mid-1);
    }
    if(mid<end and a[mid]==a[mid+1] and mid %2==1){
        return solv(a,start,mid-1);
    }
    return a[mid];
    
    
}
int Solution::solve(vector<int> &A) {
    return solv(A,0,A.size()-1);
}
