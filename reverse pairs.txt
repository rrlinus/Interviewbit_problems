Problem Description

Given an array of integers A, we call (i, j) an important reverse pair if i < j and A[i] > 2*A[j].
Return the number of important reverse pairs in the given array A.



Problem Constraints
1 <= length of the array <= 100000

1 <= A[i] <= 10^9



Input Format
The only argument given is the integer array A.



Output Format
Return the number of important reverse pairs in the given array A.



Example Input
Input 1:

 A = [1, 3, 2, 3, 1]
Input 2:

 A = [4, 1, 2]


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 There are two pairs which are important reverse i.e (3, 1) and (3, 1).
Explanation 2:

 There is only one pair i.e (4, 1).



int merge(vector<int>&v,int start,int mid,int end){
    int n1=mid-start+1;
    int n2=end-mid;
    vector<int> a(n1);
    for(int i=0;i<n1;i++){
        a[i]=v[start+i];
    }
    vector<int> b(n2);
    for(int i=0;i<n2;i++){
        b[i]=v[mid+i+1];
    }
    int ans=0;
    int i=0,j=0,k=start;
    while(i<n1 and j<n2){
        if(a[i]>b[j]){
            v[k++]=b[j++];
        }
        else{
            int x=lower_bound(b.begin(),b.end(),(a[i]+1)/2)-b.begin();
            ans +=x;
            v[k++]=a[i++];
        }
    }
    while(i<n1){
         int x=lower_bound(b.begin(),b.end(),(a[i]+1)/2)-b.begin();
         ans +=x;
         v[k++]=a[i++];
    }
    while(j<n2){
        v[k++]=b[j++];
    }
    return ans;
}
int mergeSort(vector<int>&v,int start,int end){
    if(start>=end){
        return 0;
    }
    int mid=start+(end-start)/2;
    int x=mergeSort(v,start,mid);
    int y=mergeSort(v,mid+1,end);
    int z=merge(v,start,mid,end);
    return x+y+z;
}
int Solution::solve(vector<int> &A) {
    int n=A.size();
    return mergeSort(A,0,n-1);
}
