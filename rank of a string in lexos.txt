
Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
Assume that no characters are repeated.

Note: The answer might not fit in an integer, so return your answer % 1000003



Problem Constraints
1 <= |A| <= 1000



Input Format
First argument is a string A.



Output Format
Return an integer denoting the rank of the given string.



Example Input
Input 1:

A = "acb"
Input 2:

A = "a"


Example Output
Output 1:

2
Output 2:

1


Example Explanation
Explanation 1:

Given A = "acd".
The order permutations with letters 'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba
So, the rank of A is 2.
Explanation 2:

Given A = "a".
Rank is clearly 1.


def fact(n):
    ans=1;
    for i in range(2,n+1):
        ans =(ans*i)%1000003;
    return ans;
def count_smaller(A,i):
    ct=0;
    for j in range(i,len(A)):
        if A[i]>A[j]:
            ct +=1;
    return ct;
            
class Solution:
	# @param A : string
	# @return an integer
	def findRank(self, A):
	    A.lower()
	    x=sorted(A);
	    ans =1;
	    for i in range(len(x)):
	        ans +=(fact((len(A)-i-1))*count_smaller(A,i))%1000003;
	       # print(count_smaller(A,i),end=" ")
	    return ans%1000003;
	            
	            
	    
	    
