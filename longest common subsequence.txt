Longest Common Subsequence
Problem Description

Given two strings A and B. Find the longest common subsequence ( A sequence which does not need to be contiguous), which is common in both the strings.

You need to return the length of such longest common subsequence.



Problem Constraints
1 <= Length of A, B <= 1005



Input Format
First argument is a string A.
Second argument is a string B.



Output Format
Return an integer denoting the length of the longest common subsequence.



Example Input
Input 1:

 A = "abbcdgf"
 B = "bbadcgf"
Input 2:

 A = "aaaaaa"
 B = "ababab"


Example Output
Output 1:

 5
Output 2:

 3


Example Explanation
Explanation 1:

 The longest common subsequence is "bbcgf", which has a length of 5.
Explanation 2:

 The longest common subsequence is "aaa", which has a length of 3.

int dp[1001][1001];
int soln(string A,string B,int n,int m){
    if(n==0 or m==0)
    return 0;
    if(dp[n][m]>=0)
    return dp[n][m];
    if(A[n-1]==B[m-1]){
        return dp[n][m] = 1+soln(A,B,n-1,m-1);
    }
    return dp[n][m]= max(soln(A,B,n-1,m),soln(A,B,n,m-1));
}
int Solution::solve(string A, string B) {
    memset(dp,-1,sizeof(dp));
    int n=A.length(),m=B.length();
    return soln(A,B,n,m);
}
