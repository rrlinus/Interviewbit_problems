Problem Description

Given an array of integers, every element appears thrice except for one which occurs once.

Find that element which does not appear thrice.

NOTE: Your algorithm should have a linear runtime complexity.

Could you implement it without using extra memory?




Problem Constraints
2 <= A <= 5*106

0 <= A <= INTMAX



Input Format
First and only argument of input contains an integer array A.



Output Format
Return a single integer.



Example Input
Input 1:

 A = [1, 2, 4, 3, 3, 2, 2, 3, 1, 1]
Input 2:

 A = [0, 0, 0, 1]


Example Output
Output 1:

 4
Output 2:

 1


Example Explanation
Explanation 1:

 4 occurs exactly once in Input 1.
 1 occurs exactly once in Input 2.

..................................................Algorithm.............................................................

As we know that all the numbers in the ocuure 3 times except one. it means that at each position of ith bit total number of set bit%3=1 or zero.

what you have to is that for each ith bit count number of set bet take it modulo to 3.

if total set bit modulo 3=1 set that bit in your answer.
int Solution::singleNumber(const vector<int> &A) {
    int n=A.size();
    int ct=0,ans=0;
    for(int i=31;i>=0;i--){
        ct=0;
        for(int j=0;j<n;j++){
            if(A[j]&(1<<i))
             ct++;
        }
        if(ct%3!=0){
            ans +=(1<<i);
        }
    }
    return ans;
}

