Merge Overlapping Intervals
Problem Description

Given a collection of intervals, merge all overlapping intervals.



Problem Constraints
1 <= Total number of intervals <= 100000.



Input Format
First argument is a list of intervals.



Output Format
Return the sorted list of intervals after merging all the overlapping intervals.



Example Input
Input 1:

[1,3],[2,6],[8,10],[15,18]


Example Output
Output 1:

[1,6],[8,10],[15,18]


Example Explanation
Explanation 1:

Merge intervals [1,3] and [2,6] -> [1,6].
so, the required answer after merging is [1,6],[8,10],[15,18].
No more overlapping intervals present.



How can we solve it?

when you see this problem then you can easily figure out that here we have to use sorting algorithm?
but when and where?

let's try to sort the array on the basis of the end time.since it is greedy algo so we have to give a proof by giving counter example.


____________________________________________
      
_____  ____________

it is the counter example of this algo.

So think to sort the array on the basic of start time here is the complete code.s

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool comp(Interval &x,Interval &y){
     if(x.start==y.start)
     return x.end>y.end;
     return x.start<y.start;
 }
vector<Interval> Solution::merge(vector<Interval> &A) {
    vector<Interval> ans;
    Interval temp;
    int n=A.size();
    if(n<=1){
        return A;
    }
    sort(A.begin(),A.end(),comp);
    temp.start=A[0].start;
    temp.end=A[0].end;
    for(int i=1;i<n;i++){
        if(A[i].start<=temp.end){
            temp.end=max(A[i].end,temp.end);
        }
        else{
            ans.push_back(temp);
            temp=A[i];
        }
    }
    ans.push_back(temp);
    return ans;
    
}
