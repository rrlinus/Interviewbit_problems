Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B.

If the answer does not exist return an array with a single element "-1".

First sub-array means the sub-array for which starting index in minimum.



Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109
1 <= B <= 109



Input Format
The first argument given is the integer array A.

The second argument given is integer B.



Output Format
Return the first continuous sub-array which adds to B and if the answer does not exist return an array with a single element "-1".



Example Input
Input 1:

 A = [1, 2, 3, 4, 5]
 B = 5
Input 2:

 A = [5, 10, 20, 100, 105]
 B = 110


Example Output
Output 1:

 [2, 3]
Output 2:

 -1


Example Explanation
Explanation 1:

 [2, 3] sums up to 5.
Explanation 2:

 No subarray sums up to required number.


vector<int> Solution::solve(vector<int> &A, int B) {
    int n=A.size();
    vector<int> prefix(n+1);
    prefix[0]=0;
    for(int i=1;i<=n;i++){
        prefix[i] =prefix[i-1]+A[i-1];
    }
    int i=0,j=1;
    bool f=0;
    while(j<=n){
        if(prefix[j]-prefix[i]==B){
            f=1;
            break;
        }
        else if(prefix[j]-prefix[i]<B){
            j++;
        }
        else{
            i++;
        }
    }
    if(f){
        vector<int> ans(A.begin()+i,A.begin()+j);
        return ans;
    }
    else{
        vector<int> ans={-1};
        
    return ans;
    }
    
    
}
