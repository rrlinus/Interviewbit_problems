Matrix Search
Problem Description

Given a matrix of integers A of size N x M and an integer B. Write an efficient algorithm that searches for integar B in matrix A.

This matrix A has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row.
Return 1 if B is present in A, else return 0.

NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.



Problem Constraints
1 <= N, M <= 1000
1 <= A[i][j], B <= 106



Input Format
The first argument given is the integer matrix A.
The second argument given is the integer B.



Output Format
Return 1 if B is present in A, else return 0.



Example Input
Input 1:

A = [ 
      [1,   3,  5,  7]
      [10, 11, 16, 20]
      [23, 30, 34, 50]  
    ]
B = 3
Input 2:

A = [   
      [5, 17, 100, 111]
      [119, 120, 127, 131]    
    ]
B = 3


Example Output
Output 1:

1
Output 2:

0


Example Explanation
Explanation 1:

 3 is present in the matrix at A[0][1] position so return 1.
Explanation 2:

 3 is not present in the matrix so return 0.
..................................Algorithm................................

Each row is sorted and the element in the next row must be greater than elements in the previous row.

TIme complexity: O(n+logm)

int Solution::searchMatrix(vector<vector<int> > &a, int B) {
    int n=a.size();
    int m=a[0].size();
    int i=0,j=m-1;
    while(i<n and j>=0){
        if(a[i][j]>=B){
            if(binary_search(a[i].begin(),a[i].end(),B)){
                return true;
            }
            else{
                return false;
            }
        }
        else{
            i++;
        }
    }
    return false;
}


Can we optimise more? 
Yes the idea is to use the fact that elements in the last row is less than element in the next row.
consider the whole 2d matrx like a single array.

n * m matrix convert to an array => matrix[x][y] => a[x * m + y]

an array convert to n * m matrix => a[x] =>matrix[x / m][x % m];

Time Comolexity:O(log(n*m))
int Solution::searchMatrix(vector<vector<int> > &a, int B) {
    int n=a.size();
    int m=a[0].size();
    int start=0,end=n*m-1;
    while(start<=end){
        int mid=start+(end-start)/2;
        if(a[mid/m][mid%m]==B){
            return true;
        }
        if(a[mid/m][mid%m]<B){
            start=mid+1;
        }
        else{
            end=mid-1;
        }
    }
    return false;
    
}
