Distinct Subsequences
Problem Description

Given two sequences A and B, count number of unique ways in sequence A, to form a subsequence that is identical to the sequence B.

Subsequence : A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).



Problem Constraints
1 <= length(A), length(B) <= 700



Input Format
The first argument of input contains a string A.
The second argument of input contains a string B.



Output Format
Return an integer representing the answer as described in the problem statement.



Example Input
Input 1:

 A = "abc"
 B = "abc"
Input 2:

 A = "rabbbit" 
 B = "rabbit" 


Example Output
Output 1:

 1
Output 2:

 3


Example Explanation
Explanation 1:

 Both the strings are equal.
Explanation 2:

 These are the possible removals of characters:
    => A = "ra_bbit" 
    => A = "rab_bit" 
    => A = "rabb_it"

 Note: "_" marks the removed character.


int soln(string A,string B,int n,int m){
    if(m==0)
    return 0;
    
}
int Solution::numDistinct(string A, string B) {
    int n=A.length();
    int m=B.length();
    
}
int dp[705][705];
int soln(string A,string B,int n,int m){
    if(m==0)
    return 1;
    if(n<m)
    return 0;
    if(dp[n][m]>=0)
    return dp[n][m];
    if(A[n-1]==B[m-1]){
        return dp[n][m]=soln(A,B,n-1,m-1)+soln(A,B,n-1,m);
    }
    return dp[n][m]=soln(A,B,n-1,m);
}
int Solution::numDistinct(string A, string B) {
    memset(dp,-1,sizeof(dp));
    int n=A.length();
    int m=B.length();
    return soln(A,B,n,m);
    
}
