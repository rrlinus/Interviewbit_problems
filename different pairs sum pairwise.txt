We define f(X, Y) as number of different corresponding bits in binary representation of X and Y.
For example, f(2, 7) = 2, since binary representation of 2 and 7 are 010 and 111, respectively. The first and the third bit differ, so f(2, 7) = 2.

You are given an array of N positive integers, A1, A2 ,..., AN. Find sum of f(Ai, Aj) for all pairs (i, j) such that 1 ≤ i, j ≤ N. Return the answer modulo 109+7.



Problem Constraints
1 <= N <= 105

1 <= A[i] <= 231 - 1



Input Format
First and only argument of input contains a single integer array A.



Output Format
Return a single integer denoting the sum.



Example Input
Input 1:

 A = [1, 3, 5]
Input 2:

 A = [2, 3]


Example Output
Ouptut 1:

 8
Output 2:

 2


Example Explanation
Explanation 1:

 f(1, 1) + f(1, 3) + f(1, 5) + f(3, 1) + f(3, 3) + f(3, 5) + f(5, 1) + f(5, 3) + f(5, 5) 
 = 0 + 1 + 1 + 1 + 0 + 2 + 1 + 2 + 0 = 8
Explanation 2:

 f(2, 2) + f(2, 3) + f(3, 2) + f(3, 3) = 0 + 1 + 1 + 0 = 2


................................................Algorithm:..........................................................


One simple or naive approach to solve this problem is by using two loops find all the different pairs and
do xor betwwen all the pairs.after that count set bits.


Time complexity:O(n^2)
space compleaxity:O(n)



Another approach :How can we reduce our time complexity?
when we are considering pairs then we will observe that we are taking xor with all elements to a particular element.
Now we will think in the direction of bit.

at each ith bit we will count number of set bit and unset bit at that position : and after multiply them.

class Solution:
	# @param A : list of integers
	# @return an integer
	def cntBits(self, A):
	    ans=0;
	    n=len(A)
	    for i in range(0,32,1):
	        ct1=ct0=0
	        for j in range(n):
	            if ((A[j]&(1<<i))):
	                ct1+=1;
	            else:
	                ct0+=1
	       # print(ct0,ct1,end=" ")
	        ans +=((ct0*ct1)%1000000007)%1000000007
	    return (2*ans)%1000000007
	            
	            
 

 

