N max pair combinations
Problem Description

Given two integers arrays A and B of size N each.

Find the maximum N elements from the sum combinations (Ai + Bj) formed from elements in array A and B.



Problem Constraints
1 <= N <= 2 * 105

-1000 <= A[i], B[i] <= 1000



Input Format
First argument is an integer array A.
Second argument is an integer array B.



Output Format
Return an intger array denoting the N maximum element in descending order.



Example Input
Input 1:

 A = [1, 4, 2, 3]
 B = [2, 5, 1, 6]
Input 2:

 A = [2, 4, 1, 1]
 B = [-2, -3, 2, 4]


Example Output
Output 1:

 [10, 9, 9, 8]
Output 2:

 [8, 6, 6, 5]


Example Explanation
Explanation 1:

 4 maximum elements are 10(6+4), 9(6+3), 9(5+4), 8(6+2).
Explanation 2:

 4 maximum elements are 8(4+4), 6(4+2), 6(4+2), 5(4+1).


struct comp{
  bool operator()(pair<int,int> &x,pair<int,int> &y) {
      return x.first<y.first;
  }
};
vector<int> Solution::solve(vector<int> &A, vector<int> &B) {
    
    int n=A.size();
    unordered_map<int,int> mp1;
    unordered_map<int,int> mp2;
    vector<int> ans;
    for(int i=0;i<n;i++){
        mp1[A[i]]++;
        mp2[B[i]]++;
    }
    priority_queue<pair<int,int>,vector<pair<int,int> >,comp> pq;
    for(auto i:mp1){
        for(auto j:mp2){
            pq.push({i.first+j.first,i.second*j.second});
        }
    }
    while(n>0){
        pair<int,int> temp=pq.top();
        for(int i=0;i<min(n,temp.second);i++){
            ans.push_back(temp.first);
        }
        n-=temp.second;
        pq.pop();
    }
    return ans;
}
