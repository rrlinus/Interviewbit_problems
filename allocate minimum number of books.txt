Allocate Books
Problem Description

Given an array of integers A of size N and an integer B.

College library has N books,the ith book has A[i] number of pages.

You have to allocate books to B number of students so that maximum number of pages alloted to a student is minimum.

A book will be allocated to exactly one student.
Each student has to be allocated at least one book.
Allotment should be in contiguous order, for example: A student cannot be allocated book 1 and book 3, skipping book 2.
Calculate and return that minimum possible number.



NOTE: Return -1 if a valid assignment is not possible.



Problem Constraints
1 <= N <= 105
1 <= A[i], B <= 105



Input Format
The first argument given is the integer array A.
The second argument given is the integer B.



Output Format
Return that minimum possible number



Example Input
A = [12, 34, 67, 90]
B = 2


Example Output
113


Example Explanation
There are 2 number of students. Books can be distributed in following fashion : 
        1) [12] and [34, 67, 90]
        Max number of pages is allocated to student 2 with 34 + 67 + 90 = 191 pages
        2) [12, 34] and [67, 90]
        Max number of pages is allocated to student 2 with 67 + 90 = 157 pages 
        3) [12, 34, 67] and [90]
        Max number of pages is allocated to student 1 with 12 + 34 + 67 = 113 pages
        Of the 3 cases, Option 3 has the minimum pages = 113.

//This function is used to check our current answer is possible or not.
bool solve(vector<int> &a,int total,int B){
    int n=a.size();
    int curr_sum=0;
    for(int i=0;i<n and B>0;i++){
        if(curr_sum+a[i]<=total)
        curr_sum +=a[i];
        else{
            curr_sum=a[i];
            if(curr_sum>total)//If the value of a single element is 
               B=0;//grater than the total then return false
            B--;
        }
    }
    if(B>0){
        return true;
    }
    return false;
    
}
int Solution::books(vector<int> &A, int B) {
    int n=A.size();
    int total=0;
    for(int i=0;i<n;i++){
        total +=A[i];
    }
    if(B>n)
    return -1;
    //apply binary search on the current possible answer.
    iniltialy the minimum answer should be=0 and maximum should be=total so here is the range
    int start=0,end=total;
    while(start<=end){
        int mid=start+(end-start)/2;
        bool f=solve(A,mid,B);
        if(f){
            end=mid-1;
        }
        else{
            start=mid+1;
        }
    }
    return start;
}
