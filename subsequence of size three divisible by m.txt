Given an array of integers A and an integer B. Find and return the number of subsequences of length 3 whose sum is divisible by B.

Since the total number of subsequences may be very large.

Return the total number of subsequences of length 3 whose sum is divisible by B modulo (109+7).


Input Format

The only argument given is the integer array A.
Output Format

Return the number of subsequences of length 3 whose sum is divisible by B modulo (10^9+7). 
Constraints

1 <= length of the array <= 100000
1 <= A[i] <= 10^9 
1 <= B <= 10^3
For Example

Input 1:
    A = [6, 1, 1, 4, 1, 5, 3]
    B = 2
Output 1:
    20

Input 2:
    A = [4, 10, 9]
    B = 5
Output 2:
    0


...............................ALGORITHM..................................................................

idea is simialr to count number of pairs whose sum is divisible by m.

#define ll long long
#define M 1000000007
ll power(ll x,ll n){
    ll ans=1;
    while(n){
        if(n&1)
         ans =(ans*x)%M;
         x=(x*x)%M;
         n=n>>1;
    }
    return ans;
}
int Solution::solve(vector<int> &A, int B) {
    vector<ll> hash(1005,0);
    ll n=A.size();
    for(int i=0;i<n;i++){
        hash[A[i]%B]++;
    }
    ll ans=0;
    ll inv6=power(6,M-2)%M;
    ll inv2=power(2,M-2)%M;
    for(ll i=0;i<B;i++){
        for(ll j=i;j<B;j++){
            ll rem=(B-(i+j)%B)%B;
            if(rem<j)
             continue;
            if(i==j and rem==j){
                ans +=(((hash[i]%M*(hash[i]-1)%M)%M*(hash[i]-2)%M)%M*inv6)%M;
            }
            else if(i==j){
                ans +=(((hash[i]%M*(hash[i]-1)%M)%M*hash[rem]%M)%M*inv2)%M;
            }
            else if(i==rem){
                ans +=(((hash[i]%M*(hash[i]-1)%M)%M*hash[j]%M)%M*inv2)%M;
            }
            else if(j==rem){
                ans +=(((hash[j]%M*(hash[j]-1)%M)%M*hash[i]%M)%M*inv2)%M;
            }
            else{
                ans +=((hash[i]%M*hash[j]%M)%M*hash[rem]%M)%M;
            }
        }
    }
    return ans%M;
    
    
    
}
