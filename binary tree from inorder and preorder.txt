Binary Tree From Inorder And Preorder
Problem Description

Given preorder and inorder traversal of a tree, construct the binary tree.

NOTE: You may assume that duplicates do not exist in the tree.



Problem Constraints
1 <= number of nodes <= 105



Input Format
First argument is an integer array A denoting the preorder traversal of the tree.

Second argument is an integer array B denoting the inorder traversal of the tree.



Output Format
Return the root node of the binary tree.



Example Input
Input 1:

 A = [1, 2, 3]
 B = [2, 1, 3]
Input 2:

 A = [1, 6, 2, 3]
 B = [6, 1, 3, 2]


Example Output
Output 1:

   1
  / \
 2   3
Output 2:

   1  
  / \
 6   2
    /
   3


Example Explanation
Explanation 1:

 Create the binary tree and return the root node of the tree.
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
map<int,int> mp;
TreeNode * solve(vector<int> &A,vector<int> &B,int inStart,int inEnd,int preStart,int preEnd){
    if(inStart>inEnd or preStart>preEnd){
        return NULL;
    }
    TreeNode *root=new TreeNode(A[preStart]);
    int index=mp[A[preStart]];
    //length of left elemnts in inorder
    int n=index-inStart;
    root->left=solve(A,B,inStart,index-1,preStart+1,preStart+n);
    root->right=solve(A,B,index+1,inEnd,preStart+n+1,preEnd);
    return root;
    
}
TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
    for(int i=0;i<B.size();i++){
        mp[B[i]]=i;
    }
    int n=A.size();
    return solve(A,B,0,n-1,0,n-1);
    
}
