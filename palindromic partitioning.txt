Given a string A, partition s such that every string of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Ordering the results in the answer : Entry i will come before Entry j if :
len(Entryi[0]) < len(Entryj[0]) OR
(len(Entryi[0]) == len(Entryj[0]) AND len(Entryi[1]) < len(Entryj[1])) OR * * *
(len(Entryi[0]) == len(Entryj[0]) AND ... len(Entryi[k] < len(Entryj[k]))


Problem Constraints
1 <= len(A) <= 15



Input Format
First argument is a string A of lowercase characters.



Output Format
Return a list of all possible palindrome partitioning of s.



Example Input
Input 1:

A = "aab"
Input 2:

A = "a"


Example Output
Output 1:

 [
    ["a","a","b"]
    ["aa","b"],
  ]
Output 2:

 [
    ["a"]
  ]


Example Explanation
Explanation 1:

In the given example, ["a", "a", "b"] comes before ["aa", "b"] because len("a") < len("aa").
Explanation 2:

In the given example, only partition possible is "a" .





bool isPalindrome(string s){
    string s1=s;
    reverse(s.begin(),s.end());
    return s==s1;
}
void solve(vector<vector<string> > &ans,vector<string> &v,string A,int i){
    if(i==A.length()){
        ans.push_back(v);
        return;
    }
    for(int j=1;i+j<=A.length();j++){
        if(isPalindrome(A.substr(i,j))){
            v.push_back(A.substr(i,j));
            // cout<<A.substr(i,j)<<" ";
            solve(ans,v,A,i+j);
            v.pop_back();
        }
    }
    
}
vector<vector<string> > Solution::partition(string A) {
      vector<vector<string> >ans;
      vector<string> v;
      solve(ans,v,A,0);
      return ans;
}
